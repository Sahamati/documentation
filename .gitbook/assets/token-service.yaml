swagger: '2.0'
info:
  title: Token Service APIs
  x-custom-tags:
    x-api-name: Token Service APIs
  description: >-
    # Summary
    
    This collection of APIs provides comprehensive functionality for managing users and entities within the Sahamati IAM system, from user registration and password management to entity-specific operations like secret management and token generation.
    
    ---
  version: 2.1.0
  contact:
    email: help@sahamati.org.in
tags:
  - name: Entity APIs
  - name: User APIs
schemes:
  - https
host: api.sandbox.sahamati.org.in
basePath: /iam/v1
paths:
  /entity/register:
    post:
      tags:
        - Entity APIs
      summary: Create entity
      description: 'This API allows you to register a new entity within the Sahamati Identity and Access Management (IAM) system. Entities represent organizations or systems that interact within the Sahamati ecosystem, such as Account Aggregators (AAs), Financial Information Providers (FIPs), or Financial Information Users (FIUs). Registering an entity involves providing detailed information about the entity, including its identifiers, URLs, certificates, and other relevant configurations.'
      parameters:
        - name: Authorization
          type: string
          in: header
          required: true
          description: Admin Bearer token for authorization
        - name: body
          in: body
          description: Information of the Entity to Onboard
          schema:
            $ref: '#/definitions/CreateEntityRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CreateEntityResponse'
        '403':
          description: Already Exists
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Already Exists"
              errormsg:
                type: "string"
                example: "Client already exists"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "Entity Id/Type is missing in the request"
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "User doesn’t have access to make this request"
  /entity/user/add:
    put:
      tags:
        - Entity APIs
      summary: Entity User Add
      description: 'This API allows you to add a new user to an existing entity within the Sahamati Identity and Access Management (IAM) system. The user will be assigned specific roles that determine their permissions and access levels within the entity.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: Entity Bearer token for authorization
      - name: body
        in: body
        description: Information of the User assosiated to Entity
        schema:
          $ref: '#/definitions/AddEntityUserRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/EntityUserAddResponse'
        '404':
          description: Not Found
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Not Found"
              errormsg:
                type: "string"
                example: "User doesn’t exists"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "User email is missing in the request"
  /entity/user/remove:
    delete:
      tags:
        - Entity APIs
      summary: Entity User Remove
      description: 'This API allows you to remove an existing user from an entity within the Sahamati Identity and Access Management (IAM) system. Removing a user revokes their access to the entity and any roles or permissions they had within it.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: Entity Bearer token for authorization
      - name: body
        in: body
        description: Information of the User to remove from the Entity
        schema:
          $ref: '#/definitions/RemoveEntityUserRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/EntityUserRemoveResponse'
        '404':
          description: Not Found
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Not Found"
              errormsg:
                type: "string"
                example: "User doesn’t exists"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "User email is missing in the request"
  /entity/secret/read:
    post:
      tags:
        - Entity APIs
      summary: Read Entity Secret
      description: 'This API allows you to retrieve the secret associated with a specific entity within the Sahamati Identity and Access Management (IAM) system. The entity secret is typically used for secure communication and authentication between services.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: User Bearer token for authorization
      - name: body
        in: body
        description: Information of the entity to read its secret
        schema:
          $ref: '#/definitions/EntitySecretRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/EntitySecretResponse'
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Invalid entity id"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "Entity Id is missing in the request"
  /entity/secret/reset:
    post:
      tags:
        - Entity APIs
      summary: Reset Entity Secret
      description: 'This API allows you to reset the secret associated with a specific entity within the Sahamati Identity and Access Management (IAM) system. Resetting the entity secret is typically done for security reasons, such as when the existing secret may have been compromised or during routine security maintenance.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: User Bearer token for authorization
      - name: body
        in: body
        description: Information of the entity to reset its secret
        schema:
          $ref: '#/definitions/EntitySecretRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/EntitySecretResponse'
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Invalid entity id"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "Entity Id is missing in the request"
  /entity/token/generate:
    post:
      tags:
        - Entity APIs
      summary: Entity Token Generate
      description: 'This API allows you to generate a token for a specific entity within the Sahamati Identity and Access Management (IAM) system. The generated token is used to authenticate and authorize API requests on behalf of the entity.'
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: id
          in: formData
          description: The entity ID.
          required: true
          type: string
        - name: secret
          in: formData
          description: The secret associated with the entity.
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TokenResponse'
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Invalid entity id/secret or secret is expired"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "Entity Id/Secret is missing in the request"
  /user/register:
    post:
      tags:
        - User APIs
      summary: User Onboard
      description: 'This API allows you to register a new user within the Sahamati Identity and Access Management (IAM) system. The registration process involves providing the user details, such as their username, email.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: Admin Bearer token for authorization
      - name: body
        in: body
        description: Information of the User to Onboard
        schema:
          $ref: '#/definitions/CreateUserRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/CreateUserResponse'
        '403':
          description: Already Exists
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Already Exists"
              errormsg:
                type: "string"
                example: "User already exists"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "User email is missing in the request"
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Doesn’t have access to make this request"
  /user/password/reset:
    post:
      tags:
        - User APIs
      summary: User Password Reset
      description: 'This API allows you to initiate a password reset for a user within the Sahamati Identity and Access Management (IAM) system. The password reset process is typically used when a user forgets their password or needs to update it for security reasons.'
      parameters:
      - name: Authorization
        type: string
        in: header
        required: true
        description: Admin Bearer token for authorization
      - name: body
        in: body
        description: Information of the User to Reset Password
        schema:
          $ref: '#/definitions/UserResetRequest'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserResetResponse'
        '404':
          description: Not Found
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Not Found"
              errormsg:
                type: "string"
                example: "User doesn't exists"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "User email is missing in the request"
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Doesn’t have access to make this request"
  /user/token/generate:
    post:
      tags:
        - User APIs
      summary: User Token Generate
      description: 'This API allows a registered user to generate an authentication token within the Sahamati Identity and Access Management (IAM) system. The generated token is used to authenticate and authorize API requests on behalf of the user.'
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: username
          in: formData
          description: User email.
          required: true
          type: string
        - name: password
          in: formData
          description: The password associated with the user.
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/TokenResponse'
        '401':
          description: Unauthorized
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Unauthorized"
              errormsg:
                type: "string"
                example: "Invalid username/password or password is expired"
        '400':
          description: Bad Request
          schema:
            type: "object"
            properties:
              ver:
                type: "string"
                example: "1.0.0"
              timestamp:
                type: "string"
                format: "date-time"
                example: "2024-07-16T11:33:34.509Z"
              txnid:
                type: "string"
                example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
              errorcode:
                type: "string"
                example: "Bad Request"
              errormsg:
                type: "string"
                example: "User Id/Password is missing in the reques"

definitions:
  CreateEntityRequest:
    type: object
    required:
      - ver
      - timestamp
      - txnid
      - type
      - status
      - created_by
      - entity
    properties:
      ver:
        type: string
        example: '2.0.0'
        description: API version.
        xml:
          attribute: true
      timestamp:
        type: string
        description: Request creation timestamp.
        format: date-time
        example: '2023-06-26T06:41:54.904+0000'
        xml:
          attribute: true
      txnid:
        type: string
        description: >-
          Unique transaction identifier used for providing an end to end
          traceability.
        example: f35761ac-4a18-11e8-96ff-0277a9fbfedc
        xml:
          attribute: true
      type:
        type: string
        example: 'AA'
        description: Entity Type. AA/FIU/FIP
        xml:
          attribute: true
      status:
        type: string
        example: 'ACTIVE'
        description: Entity status.
        xml:
          attribute: true
      created_by:
        type: string
        example: 'Sahamati Admin'
        description: Entity created by.
        xml:
          attribute: true
      entity:
        type: object
        required:
          - id
          - name
          - code
          - entityhandle
          - Identifiers
          - baseurl
          - fitypes
          - certificate
          - inboundports
          - outboundports
          - ips
        description: >-
          This block would contain the information about the entity used for onboarding.
        properties:
          id:
            type: string
            example: 'SANDBOX_AA_1'
            description: Entity Id.
            xml:
              attribute: true
          name:
            type: string
            example: SANDBOX_AA_1
            description: Name of the Entity.
            xml:
              attribute: true
          code:
            type: string
            example: SANDBOX_AA_1
            description: Entity code.
            xml:
              attribute: true
          entityhandle:
            type: string
            example: "@sandbox-aa"
            description: Entity Handle.
            xml:
              attribute: true
          Identifiers:
            type: array
            items:
              type: object
              description: >-
                A set of Identifiers required for discovering the accounts of a customer at the FIP. 
                It is mandatory to send atleast one STRONG category Identifier. 
                All identifiers which are used primarily for discovery must be authenticated 
                to ensure that they belong to the user to prevent malicious activity.
              required:
                - category
                - type
              properties:
                category:
                  type: string
                  description: >-
                    Category of identifiers based on the ability to find
                    authenticity online.
                  enum:
                    - STRONG
                    - WEAK
                    - ANCILLARY
                  xml:
                    attribute: true
                type:
                  type: string
                  description: Specifies the type of identifier.
                  example: MOBILE
                  xml:
                    attribute: true
                  enum:
                    - MOBILE
                    - AADHAR
                    - EMAIL
                    - PAN
                    - DOB
                    - ACCNO
                    - CRN
                    - PPAN
                    - Others
          baseurl:
            type: string
            example: v2:https://sandbox-aa.in
            description: Base Url of the Entity.
            xml:
              attribute: true
          webviewurl:
            type: string
            example: null
            xml:
              attribute: true
          fitypes:
            type: array
            items:
              type: string
            example: [""]
            description: Entity fi types.
            xml:
              attribute: true
          certificates:
            type: object
            required:
              - alg
              - e
              - kid
              - kty
              - n
              - use
            properties:
                alg:
                  type: string
                  example: RS256
                  xml:
                    attribute: true
                e:
                  type: string
                  example: AQAB
                  xml:
                    attribute: true
                kid:
                  type: string
                  example: 4nEXdWUL6lG6CrWONiH6pFzh7kqvqX_BKOs8PFIYlya
                  xml:
                    attribute: true
                kty:
                  type: string
                  example: RSA
                  xml:
                    attribute: true
                n:
                  type: string
                  example: uh0fNzOYK2L2wGzixMLN-pOIHDH1tuA3rk6MmW39Q0VbAHWXmn0fZpS88hcIARmsPbbNXAW59VDCGEgPd49VVfiOeENI8PqliNml8gB1C1oGkpnAcda8O4v5kd_ZN4YZcLYqHyv9L8RnBidOzXzi-CxdgoFtM3pAnUYBERbbYi8LK5em8mBCixKuX_NszbrZiT14SY1AglNEWNPgibt3EMzGSxGyWyOgSEfsaQ4HGlppPU5lkWNx1GqktYelDxE7VQDNOGsoS1l03_JVr1oyYIA-1-M9ndq4Cjx3x9QFfaPts8MGw5yWSZCugbIeoBPzHmvlgm3CiGgqFQVrL1mJ2w
                  xml:
                    attribute: true
                use:
                  type: string
                  example: sig
                  xml:
                    attribute: true
          inboundports:
            type: array
            items:
              type: string
            example: ["433"]
            xml:
              attribute: true
          outboundports:
            type: array
            items:
              type: string
            example: ["443"]
            xml:
              attribute: true
          ips:
            type: array
            items:
              type: string
            example: ["3.109.145.80"]
            xml:
              attribute: true
              
  CreateEntityResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      message:
        type: "string"
        example: "Entity successfully onboarded."
      entity:
        type: "object"
        properties:
          id:
            type: "string"
            example: "aa-1"
          name:
            type: "string"
            example: "aa"
          status:
            type: "string"
            example: "ACTIVE"
  
  AddEntityUserRequest:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      username:
        type: "string"
        example: "newuser@example.com"
      entityid:
        type: "string"
        example: "aa-1"
      roles:
        type: "array"
        items:
          type: "string"
        example:
            - "entity-admin"
  
  EntityUserAddResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      message:
        type: "string"
        example: "User successfully linked to the entity."
  
  RemoveEntityUserRequest:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      username:
        type: "string"
        example: "newuser@example.com"
      entityid:
        type: "string"
        example: "aa-1"
  
  EntityUserRemoveResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      message:
        type: "string"
        example: "User successfully removed from the entity."
  
  EntitySecretRequest:
    type: "object"
    required:
      - ver
      - timestamp
      - txnid
      - entityid
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      entityid:
        type: "string"
        example: "aa-1"
  
  EntitySecretResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      entityid:
        type: "string"
        example: "aa-1"
      secret:
        type: "string"
        example: "xxxxxxxxxxxxxxxxxxxxx"
  
  TokenResponse:
    type: "object"
    properties:
      accesstoken:
        type: "string"
        example: ""
      expires_in:
        type: "integer"
        example: 86400
      token_type:
        type: "string"
        example: "Bearer"
  
  CreateUserRequest:
    type: "object"
    properties:
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      username:
        type: "string"
        example: "test.user@example.in"
      email:
        type: "string"
        example: "stest.user@example.in"
      firstname:
        type: "string"
        example: "Test"
      lastname:
        type: "string"
        example: "User"
  
  CreateUserResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      username:
        type: "string"
        example: "test.user@example.in"
      message:
        type: "string"
        example: "User has been successfully onboarded. Please check your email for further instructions."
  
  UserResetRequest:
    type: "object"
    properties:
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      email:
        type: "string"
        example: "test.user@example.in"
  
  UserResetResponse:
    type: "object"
    properties:
      ver:
        type: "string"
        example: "1.0.0"
      timestamp:
        type: "string"
        format: "date-time"
        example: "2024-07-16T11:33:34.509Z"
      txnid:
        type: "string"
        example: "f35761ac-4a18-11e8-96ff-0277a9fbfedc"
      message:
        type: "string"
        example: "The password reset link has been successfully sent to the user's email."